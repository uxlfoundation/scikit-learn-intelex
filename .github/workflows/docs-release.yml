#===============================================================================
# Copyright 2024 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#===============================================================================
name: Docs Release

on:
  push:
    tags:
      - '[0-9][0-9][0-9][0-9].[0-9][0-9]?.[0-9]'  # Trigger on tag pushes

permissions:
  contents: write
  
jobs:
  build-docs:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Ensures all tags are fetched

    - name: Set Up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install System Dependencies
      run: sudo apt-get update && sudo apt-get install -y clang-format pandoc

    - name: Extract Tag Version
      run: |
        export DOC_VERSION="${GITHUB_REF#refs/tags/}"
        # Error out if cannot find version
        if [ -z "$DOC_VERSION" ]; then
          echo "ERROR: Failed to determine documentation version."
          exit 1
        fi
        export SHORT_DOC_VERSION=$(echo "$DOC_VERSION" | awk -F'.' '{print $1"."$2}')
        # export env var in other files
        echo "DOC_VERSION=$DOC_VERSION" >> $GITHUB_ENV
        echo "SHORT_DOC_VERSION=$SHORT_DOC_VERSION" >> $GITHUB_ENV
    - name: Checkout release branch
      run: |
        if git checkout $DOC_VERSION 2>/dev/null; then
          echo "Successfully checked out tag $DOC_VERSION."
        else
            echo "ERROR: Tag $DOC_VERSION does not exist."
            exit 1
        fi
        git branch
    - name: Install Python Dependencies
      run: |
        pip install daal-devel impi-devel
        pip install -r dependencies-dev
        pip install -r requirements-doc.txt
        pip install -r requirements-test.txt
        pip list
    - name: Build daal4py/sklearnex
      run: |
        export DALROOT=$(dirname $(dirname $(which python)))
        export LD_LIBRARY_PATH=$(dirname $(dirname $(which python)))/lib:$LD_LIBRARY_PATH
        ./conda-recipe/build.sh
    - name: Build scikit-learn-intelex Documentation
      run: |
        export LD_LIBRARY_PATH=$(dirname $(dirname $(which python)))/lib:$LD_LIBRARY_PATH
        cd doc
        ./build-doc.sh --gh-pages
        ls _build/scikit-learn-intelex
    - name: Modify version json file
      run: |
        BUILD_DIR="doc/_build/scikit-learn-intelex"
        echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
        export VERSIONS_FILE="$BUILD_DIR/versions.json"
        # Exit if cannot get versions file in build
        if [ ! -f "$VERSIONS_FILE" ]; then
          echo "ERROR: $VERSIONS_FILE does not exist!"
          exit 1
        fi
        # Add new section in versions file and replace latest with new version
        jq --arg version "$SHORT_DOC_VERSION" '. |= [{"name": $version, "version": $version, "url": ("/scikit-learn-intelex/" + $version + "/")}] + .' "$VERSIONS_FILE" > tmp.json && mv tmp.json "$VERSIONS_FILE"
        jq --arg version "$SHORT_DOC_VERSION" '(.[] | select(.name == "latest")) .version = $version' "$VERSIONS_FILE" > tmp.json && mv tmp.json "$VERSIONS_FILE"
    - name: Deploy Documentation to gh-pages
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Set git auth for push changes 
        git config --global user.name "GitHub Actions"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        # Define paths
        DEPLOY_DIR="/tmp/gh-pages-deploy"
        # Ensure the build directory exists
        if [ ! -d "$BUILD_DIR" ]; then
            echo "ERROR: Documentation build directory not found!"
            exit 1
        fi
        # Copy built documentation to a temp location
        mkdir -p "$DEPLOY_DIR"
        cp -R "$BUILD_DIR"/* "$DEPLOY_DIR"
        ls $DEPLOY_DIR
        # Checkout gh-pages branch
        if git fetch origin gh-pages; then
          git checkout gh-pages
        else
          git checkout -b gh-pages
        fi
        # Move the new versioned folder to the correct location
        rm -rf latest 
        cp -R "$DEPLOY_DIR/$SHORT_DOC_VERSION" latest
        cp -R "$DEPLOY_DIR/$SHORT_DOC_VERSION" "$SHORT_DOC_VERSION"
        cp "$DEPLOY_DIR/index.html" .
        cp "$DEPLOY_DIR/versions.json" .
        # Commit and push changes
        git add "$SHORT_DOC_VERSION"
        git commit . -m "Automatic doc update for version $DOC_VERSION"
        git push origin gh-pages

