#===============================================================================
# Copyright 2024 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#===============================================================================
name: Docs Build

on:
  push:
    tags:
      - "[0-9]*.[0-9]*.[0-9]*"  # Trigger on tag pushes

jobs:
  build-docs:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Ensures all tags are fetched

    - name: Set Up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install System Dependencies
      run: sudo apt-get update && sudo apt-get install -y clang-format pandoc

    - name: Extract Tag Version
      run: |
        echo "GITHUB_REF: $GITHUB_REF"
        DOC_VERSION="${GITHUB_REF#refs/tags/}"
        echo "DOC_VERSION: $DOC_VERSION"
        echo "DOC_VERSION=$DOC_VERSION" >> $GITHUB_ENV
        # Error iif cannot find version
        if [ -z "$DOC_VERSION" ]; then
          echo "ERROR: Failed to determine documentation version."
          exit 1
        fi
        echo "doc version can be found"

    - name: Checkout release brance
      run: |
        if git checkout $DOC_VERSION 2>/dev/null; then
          echo "Successfully checked out tag $DOC_VERSION."
        else
            echo "ERROR: Tag $DOC_VERSION does not exist."
            exit 1
        fi
        git branch
        echo "Can checkout release brance"
    
    - name: Install Python Dependencies
      run: |
        pip install daal-devel impi-devel
        pip install -r dependencies-dev
        pip install -r requirements-doc.txt
        pip install -r requirements-test.txt
        pip list

    - name: Build daal4py/sklearnex
      run: |
        export DALROOT=$(dirname $(dirname $(which python)))
        export LD_LIBRARY_PATH=$(dirname $(dirname $(which python)))/lib:$LD_LIBRARY_PATH
        ./conda-recipe/build.sh

    - name: Build daal4py Documentation
      run: |
        export LD_LIBRARY_PATH=$(dirname $(dirname $(which python)))/lib:$LD_LIBRARY_PATH
        cd doc/daal4py
        make html 2>&1 | tee build.log
        cat build.log
        if grep -i "autodoc" build.log; then
          echo "Autodoc Warnings detected, build failed!"
          exit 1
        fi

    - name: Modify version json file
      run: |
        VERSIONS_FILE="versions.json"
        if [ ! -f "$VERSIONS_FILE" ]; then
          echo "ERROR: $VERSIONS_FILE does not exist!"
          exit 1
        fi
        VERSION=$(echo "$DOC_VERSION" | awk -F'.' '{print $1"."$2}')
        jq --arg version "$VERSION" '. |= [{"name": $version, "version": $version, "url": ("/scikit-learn-intelex/" + $version + "/")}] + .' "$VERSIONS_FILE" > tmp.json && mv tmp.json "$VERSIONS_FILE"
        jq --arg version "$VERSION" '(.[] | select(.name == "latest")) .version = $version' "$VERSIONS_FILE" > tmp.json && mv tmp.json "$VERSIONS_FILE"

        echo "Updated versions.json:"
        cat "$VERSIONS_FILE"

    - name: Build scikit-learn-intelex Documentation
      run: |
        export LD_LIBRARY_PATH=$(dirname $(dirname $(which python)))/lib:$LD_LIBRARY_PATH
        cd doc
        ./build-doc.sh --gh-pages
        echo "doc build folder"
        ls doc/_build/
        echo "doc folder"

    # Upload doc for download
    - name: Upload Documentation Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation-${{ env.DOC_VERSION }}
        path: doc/_build/html


    - name: Deploy Documentation to gh-pages
      run: |
        # Define paths
        BUILD_DIR="doc/_build/"
        DEPLOY_DIR="/tmp/gh-pages-deploy"

        # Ensure the build directory exists
        if [ ! -d "$BUILD_DIR" ]; then
            echo "ERROR: Documentation build directory not found!"
            exit 1
        fi

        ls $DEPLOY_DIR


        # Copy built documentation to a temp location
        # mkdir -p "$DEPLOY_DIR"
        # cp -R "$BUILD_DIR"/* "$DEPLOY_DIR"

        echo "Copied generated documentation to $DEPLOY_DIR"

        # Checkout gh-pages branch
        # git fetch origin gh-pages
        # git checkout gh-pages

        # Copy docs to gh-pages branch
        # cp -R "$DEPLOY_DIR"/* .

        # Commit and push changes
        # git add .
        # git commit -m "Update documentation for version $DOC_VERSION"
        # git push origin gh-pages
